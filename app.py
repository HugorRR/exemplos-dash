import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource
import pydeck as pdk
import graphviz
import seaborn as sns
from sklearn.datasets import make_blobs
import datetime
import os

# Set page configuration
st.set_page_config(
    page_title="Dashboard de Tipos de Gr√°ficos",
    page_icon="üìä",
    layout="wide"
)

# Implementa√ß√£o do contador de acessos persistente
def update_visit_counter():
    # Arquivo que armazenar√° as estat√≠sticas de visitas
    COUNTER_FILE = "visit_counter.csv"
    
    current_time = datetime.datetime.now()
    current_time_str = current_time.strftime("%d/%m/%Y %H:%M:%S")
    
    try:
        # Se o arquivo n√£o existir, cria um novo com valores iniciais
        if not os.path.exists(COUNTER_FILE):
            try:
                visit_df = pd.DataFrame({
                    'visits': [1],
                    'first_visit': [current_time_str],
                    'last_visit': [current_time_str]
                })
                visit_df.to_csv(COUNTER_FILE, index=False)
                return 1, current_time_str, current_time_str
            except PermissionError:
                # Em ambientes de deploy, pode haver restri√ß√£o de escrita
                return 1, current_time_str, current_time_str
        
        # Caso contr√°rio, l√™ o arquivo existente e atualiza
        try:
            visit_df = pd.read_csv(COUNTER_FILE)
            visits = visit_df['visits'].iloc[0] + 1
            first_visit = visit_df['first_visit'].iloc[0]
            
            # Atualiza o contador e a data da √∫ltima visita
            visit_df['visits'] = visits
            visit_df['last_visit'] = current_time_str
            
            # Salva os dados atualizados
            try:
                visit_df.to_csv(COUNTER_FILE, index=False)
            except PermissionError:
                # Em caso de erro de permiss√£o, retorna os valores atualizados sem salvar
                pass
                
            return visits, first_visit, current_time_str
        except Exception as e:
            # Se ocorrer erro na leitura, come√ßa um novo contador
            return 1, current_time_str, current_time_str
    except Exception as e:
        # Tratamento de erro gen√©rico para garantir que a aplica√ß√£o continue
        # mesmo se o contador falhar
        st.warning(f"Nota: Contador temporariamente indispon√≠vel em modo de demonstra√ß√£o")
        return "-", "-", "-"

# Obt√©m as estat√≠sticas de visitas
visits, first_visit, last_visit = update_visit_counter()

# Header com contador
st.title("üìä Dashboard de Tipos de Gr√°ficos")

# Contador de acessos com design aprimorado
col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    st.metric(label="üëÅÔ∏è Visualiza√ß√µes", value=visits)
with col2:
    st.caption("üïí Primeira visita: " + first_visit)
with col3:
    st.caption("üïí √öltima visita: " + last_visit)

st.subheader("Demonstra√ß√£o de todos os tipos de gr√°ficos dispon√≠veis no Streamlit")

# Introdu√ß√£o com explica√ß√£o
st.markdown("""
## Guia Completo de Visualiza√ß√£o de Dados para Tomada de Decis√µes

Este dashboard apresenta um cat√°logo completo de visualiza√ß√µes que podem transformar dados em insights valiosos para sua empresa.

Aqui voc√™ encontrar√° exemplos de todos os tipos de gr√°ficos e visualiza√ß√µes dispon√≠veis, organizados por categoria e com explica√ß√µes sobre quando usar cada um para obter o m√°ximo valor dos seus dados.

Cada visualiza√ß√£o inclui uma explica√ß√£o dos casos de uso mais adequados e os benef√≠cios que proporciona para an√°lise de neg√≥cios.
""")

# Generate sample data
@st.cache_data
def generate_data():
    # Time series data for line, area, and bar charts
    dates = pd.date_range(start='2023-01-01', periods=30, freq='D')
    np.random.seed(42)
    
    df_timeseries = pd.DataFrame({
        'date': dates,
        'sales': np.random.randint(100, 200, size=30) + np.sin(np.arange(30)/2) * 40,
        'customers': np.random.randint(80, 150, size=30) + np.cos(np.arange(30)/2) * 30,
        'conversion': np.random.uniform(1, 5, size=30) + np.sin(np.arange(30)/3) * 1.5
    })
    
    # Categorical data
    categories = ['A', 'B', 'C', 'D', 'E']
    df_categorical = pd.DataFrame({
        'category': categories,
        'value1': np.random.randint(10, 100, size=5),
        'value2': np.random.randint(10, 100, size=5)
    })
    
    # Map data (Brazilian cities)
    df_map = pd.DataFrame({
        'lat': [-23.5505, -22.9068, -30.0346, -3.7319, -15.7801, -12.9714, -27.5954, -19.9167],
        'lon': [-46.6333, -43.1729, -51.2177, -38.5267, -47.9292, -38.5014, -48.5480, -43.9345],
        'size': np.random.randint(10, 100, size=8),
        'name': ['S√£o Paulo', 'Rio de Janeiro', 'Porto Alegre', 'Fortaleza', 'Bras√≠lia', 'Salvador', 'Florian√≥polis', 'Belo Horizonte']
    })
    
    # Multivariate data for scatter plots
    X, y = make_blobs(n_samples=200, centers=4, random_state=42, cluster_std=1.5)
    df_scatter = pd.DataFrame(X, columns=['Feature 1', 'Feature 2'])
    df_scatter['Cluster'] = y
    
    # Network data for graphviz
    network_data = """
    digraph G {
        Vendas -> Marketing;
        Marketing -> Estrat√©gia;
        Vendas -> Financeiro;
        Financeiro -> Relat√≥rios;
        Estrat√©gia -> Relat√≥rios;
        Opera√ß√µes -> Log√≠stica;
        Log√≠stica -> Entrega;
    }
    """
    
    return df_timeseries, df_categorical, df_map, df_scatter, network_data

# Get data
df_timeseries, df_categorical, df_map, df_scatter, network_data = generate_data()

# Create tabs for different chart types
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["Gr√°ficos Nativos", "Matplotlib/Seaborn", "Altair/Vega-Lite", "Plotly", "Outros Gr√°ficos", "Visualiza√ß√µes de Dados"])

with tab1:
    st.header("Gr√°ficos Nativos do Streamlit")
    st.markdown("""
    Os gr√°ficos nativos do Streamlit s√£o simples de implementar e n√£o requerem bibliotecas adicionais.
    S√£o ideais para visualiza√ß√µes r√°pidas e prot√≥tipos.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Gr√°fico de Linha")
        st.markdown("""
        **Melhor para:** Visualizar tend√™ncias ao longo do tempo.
        """)
        st.line_chart(df_timeseries.set_index('date')[['sales', 'customers']])
        
        st.subheader("Gr√°fico de Barras")
        st.markdown("""
        **Melhor para:** Comparar valores entre diferentes categorias.
        """)
        st.bar_chart(df_timeseries.set_index('date')[['sales', 'customers']].iloc[-10:])
    
    with col2:
        st.subheader("Gr√°fico de √Årea")
        st.markdown("""
        **Melhor para:** Visualizar volumes e compara√ß√µes acumulativas.
        """)
        st.area_chart(df_timeseries.set_index('date')[['sales', 'customers']])
        
        st.subheader("Mapa")
        st.markdown("""
        **Melhor para:** Visualizar dados geogr√°ficos de forma simples.
        """)
        st.map(df_map)

with tab2:
    st.header("Integra√ß√£o com Matplotlib e Seaborn")
    st.markdown("""
    Matplotlib e Seaborn oferecem maior controle sobre a personaliza√ß√£o dos gr√°ficos.
    Use quando precisar de visualiza√ß√µes estat√≠sticas avan√ßadas ou gr√°ficos altamente personalizados.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Gr√°ficos de Linha Personalizados")
        st.markdown("""
        **Melhor para:** Criar visualiza√ß√µes altamente personalizadas.
        """)
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(df_timeseries['date'], df_timeseries['sales'], label='Vendas')
        ax.plot(df_timeseries['date'], df_timeseries['customers'], label='Clientes')
        ax.set_xlabel('Data')
        ax.set_ylabel('Valor')
        ax.set_title('Vendas e Clientes ao Longo do Tempo')
        ax.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
    
    with col2:
        st.subheader("Gr√°ficos de Barra com Seaborn")
        st.markdown("""
        **Melhor para:** Gr√°ficos estat√≠sticos elegantes com menos c√≥digo.
        """)
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x='category', y='value1', data=df_categorical, ax=ax)
        ax.set_title('Valor por Categoria')
        ax.set_xlabel('Categoria')
        ax.set_ylabel('Valor')
        plt.tight_layout()
        st.pyplot(fig)
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.subheader("Gr√°fico de Dispers√£o")
        st.markdown("""
        **Melhor para:** Identificar rela√ß√µes e padr√µes entre vari√°veis.
        """)
        fig, ax = plt.subplots(figsize=(10, 6))
        scatter = ax.scatter(df_scatter['Feature 1'], df_scatter['Feature 2'], 
                            c=df_scatter['Cluster'], cmap='viridis', alpha=0.8)
        ax.set_title('Gr√°fico de Dispers√£o por Cluster')
        ax.set_xlabel('Feature 1')
        ax.set_ylabel('Feature 2')
        plt.colorbar(scatter, ax=ax, label='Cluster')
        plt.tight_layout()
        st.pyplot(fig)
    
    with col4:
        st.subheader("Gr√°fico de Calor")
        st.markdown("""
        **Melhor para:** Visualizar matrizes de correla√ß√£o e dados em grade.
        """)
        # Create correlation matrix
        corr_matrix = df_timeseries[['sales', 'customers', 'conversion']].corr()
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
        ax.set_title('Matriz de Correla√ß√£o')
        plt.tight_layout()
        st.pyplot(fig)

with tab3:
    st.header("Integra√ß√£o com Altair e Vega-Lite")
    st.markdown("""
    Altair e Vega-Lite permitem criar gr√°ficos interativos usando uma abordagem declarativa.
    Ideal para explora√ß√µes de dados interativas e elegantes.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Gr√°fico Interativo Altair")
        st.markdown("""
        **Melhor para:** Visualiza√ß√µes de dados interativas com sintaxe declarativa.
        """)
        chart = alt.Chart(df_timeseries).mark_line().encode(
            x='date:T',
            y='sales:Q',
            tooltip=['date:T', 'sales:Q']
        ).properties(
            title='Vendas ao Longo do Tempo',
            width=600
        ).interactive()
        
        st.altair_chart(chart, use_container_width=True)
    
    with col2:
        st.subheader("Gr√°fico de Barras Vega-Lite")
        st.markdown("""
        **Melhor para:** Definir visualiza√ß√µes usando especifica√ß√µes JSON do Vega-Lite.
        """)
        vega_spec = {
            'mark': 'bar',
            'encoding': {
                'x': {'field': 'category', 'type': 'nominal'},
                'y': {'field': 'value1', 'type': 'quantitative'},
                'color': {'field': 'category', 'type': 'nominal'},
                'tooltip': [
                    {'field': 'category', 'type': 'nominal'},
                    {'field': 'value1', 'type': 'quantitative'}
                ]
            }
        }
        
        st.vega_lite_chart(df_categorical, vega_spec, use_container_width=True)
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.subheader("Gr√°fico de Dispers√£o Interativo")
        st.markdown("""
        **Melhor para:** Criar gr√°ficos de dispers√£o interativos para an√°lise explorat√≥ria.
        """)
        scatter_chart = alt.Chart(df_scatter).mark_circle(size=60).encode(
            x='Feature 1:Q',
            y='Feature 2:Q',
            color='Cluster:N',
            tooltip=['Feature 1:Q', 'Feature 2:Q', 'Cluster:N']
        ).properties(
            width=600,
            height=400,
            title='Gr√°fico de Dispers√£o por Cluster'
        ).interactive()
        
        st.altair_chart(scatter_chart, use_container_width=True)
    
    with col4:
        st.subheader("Mapa de Calor Vega-Lite")
        st.markdown("""
        **Melhor para:** Visualizar dados em grade ou matrizes de correla√ß√£o.
        """)
        # Prepare data for heatmap
        heatmap_data = df_timeseries[['sales', 'customers', 'conversion']].corr().reset_index()
        heatmap_data = heatmap_data.melt(id_vars='index')
        
        vega_heatmap = {
            'mark': 'rect',
            'encoding': {
                'x': {'field': 'index', 'type': 'nominal'},
                'y': {'field': 'variable', 'type': 'nominal'},
                'color': {'field': 'value', 'type': 'quantitative', 'scale': {'scheme': 'blueorange'}},
                'tooltip': [
                    {'field': 'index', 'type': 'nominal'},
                    {'field': 'variable', 'type': 'nominal'},
                    {'field': 'value', 'type': 'quantitative'}
                ]
            }
        }
        
        st.vega_lite_chart(heatmap_data, vega_heatmap, use_container_width=True)

with tab4:
    st.header("Integra√ß√£o com Plotly")
    st.markdown("""
    Plotly oferece gr√°ficos interativos de alta qualidade com recursos avan√ßados.
    Perfeito para dashboards com visualiza√ß√µes interativas sofisticadas.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Gr√°fico de Linha Plotly")
        st.markdown("""
        **Melhor para:** Criar gr√°ficos de linha interativos com recursos avan√ßados.
        """)
        fig = px.line(df_timeseries, x='date', y=['sales', 'customers'], 
                     title='Vendas e Clientes ao Longo do Tempo')
        fig.update_layout(xaxis_title='Data', yaxis_title='Valor',
                         legend_title='M√©trica', height=500)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("Gr√°fico de Barras Plotly")
        st.markdown("""
        **Melhor para:** Gr√°ficos de barras interativos com m√∫ltiplas s√©ries e recursos avan√ßados.
        """)
        fig = px.bar(df_categorical, x='category', y=['value1', 'value2'], 
                    barmode='group', title='Valores por Categoria')
        fig.update_layout(xaxis_title='Categoria', yaxis_title='Valor',
                         legend_title='S√©rie', height=500)
        st.plotly_chart(fig, use_container_width=True)
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.subheader("Gr√°fico de Dispers√£o 3D")
        st.markdown("""
        **Melhor para:** Visualiza√ß√µes tridimensionais interativas para an√°lise multivariada.
        """)
        # Add a third dimension to our data
        df_scatter_3d = df_scatter.copy()
        df_scatter_3d['Feature 3'] = np.random.randn(len(df_scatter)) * 2 + df_scatter_3d['Cluster'] * 1.5
        
        fig = px.scatter_3d(df_scatter_3d, x='Feature 1', y='Feature 2', z='Feature 3',
                           color='Cluster', opacity=0.7, title='Gr√°fico de Dispers√£o 3D')
        fig.update_layout(height=600)
        st.plotly_chart(fig, use_container_width=True)
    
    with col4:
        st.subheader("Gr√°fico de Pizza")
        st.markdown("""
        **Melhor para:** Visualizar propor√ß√µes de um total ou composi√ß√£o percentual.
        """)
        fig = px.pie(df_categorical, values='value1', names='category', 
                   title='Distribui√ß√£o de Valores por Categoria')
        fig.update_traces(textposition='inside', textinfo='percent+label')
        fig.update_layout(height=600)
        st.plotly_chart(fig, use_container_width=True)

with tab5:
    st.header("Outros Tipos de Gr√°ficos")
    st.markdown("""
    O Streamlit suporta integra√ß√£o com outras bibliotecas populares como Bokeh para gr√°ficos interativos na web,
    PyDeck para visualiza√ß√µes geoespaciais 3D, e Graphviz para diagramas estruturais.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Gr√°fico Bokeh")
        st.markdown("""
        **Melhor para:** Visualiza√ß√µes interativas para aplica√ß√µes web.
        """)
        categories = df_categorical['category'].tolist()
        
        # Criando o gr√°fico Bokeh
        p = figure(
            x_range=categories, 
            height=350, 
            title="Gr√°fico de Barras Bokeh",
            toolbar_location=None
        )
        
        # Deslocamento para posicionar as barras lado a lado
        width = 0.4
        offset = width/2
        
        # Primeira s√©rie de barras (deslocada para a esquerda)
        p.vbar(
            x=[i-offset for i in range(len(categories))], 
            top=df_categorical['value1'], 
            width=width, 
            legend_label="Valor 1",
            color="#c9d9d3"
        )
        
        # Segunda s√©rie de barras (deslocada para a direita)
        p.vbar(
            x=[i+offset for i in range(len(categories))], 
            top=df_categorical['value2'], 
            width=width, 
            legend_label="Valor 2",
            color="#718dbf", 
            alpha=0.7
        )
        
        # Configurando r√≥tulos do eixo x
        p.xaxis.ticker = list(range(len(categories)))
        p.xaxis.major_label_overrides = {i: category for i, category in enumerate(categories)}
        
        p.xgrid.grid_line_color = None
        p.legend.location = "top_right"
        p.legend.orientation = "horizontal"
        
        st.bokeh_chart(p, use_container_width=True)
    
    with col2:
        st.subheader("Diagrama Graphviz")
        st.markdown("""
        **Melhor para:** Visualizar estruturas hier√°rquicas, fluxos e redes.
        """)
        st.graphviz_chart(network_data)
    
    st.subheader("Visualiza√ß√£o PyDeck 3D")
    st.markdown("""
    **Melhor para:** Visualiza√ß√µes geoespaciais avan√ßadas e mapas 3D.
    """)
    
    # Prepare data for PyDeck
    df_map['size_scaled'] = df_map['size'] * 1000  # Scale for visibility
    
    # Define layer
    layer = pdk.Layer(
        "ScatterplotLayer",
        df_map,
        get_position=['lon', 'lat'],
        get_radius='size_scaled',
        get_fill_color=[255, 140, 0, 140],
        pickable=True,
        opacity=0.8,
        radius_scale=1,
        radius_min_pixels=5,
        radius_max_pixels=50,
    )
    
    # Set the viewport location
    view_state = pdk.ViewState(
        longitude=-53.0,
        latitude=-14.0,
        zoom=3,
        pitch=50,
    )
    
    # Render
    r = pdk.Deck(
        layers=[layer],
        initial_view_state=view_state,
        tooltip={"text": "{name}\nValor: {size}"},
        map_style="mapbox://styles/mapbox/light-v9",
    )
    
    st.pydeck_chart(r)

with tab6:
    st.header("Visualiza√ß√µes Adicionais de Dados")
    st.markdown("""
    Al√©m dos gr√°ficos, o Streamlit tamb√©m oferece outras formas de visualizar dados,
    como m√©tricas, tabelas interativas, e visualiza√ß√µes formatadas.
    """)
    
    # M√©tricas
    st.subheader("Indicadores com Tend√™ncia")
    st.markdown("""
    **Melhor para:** Destacar KPIs e m√©tricas importantes com indicadores de tend√™ncia.
    """)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(label="Vendas", value="R$12.456", delta="8%")
    with col2:
        st.metric(label="Clientes", value="1.245", delta="-2%")
    with col3:
        st.metric(label="Convers√£o", value="3.2%", delta="0.5%")
    
    # Tabelas e DataFrames
    st.subheader("Tabelas Interativas")
    st.markdown("""
    **Melhor para:** Exibir dados tabulares com recursos interativos (ordena√ß√£o, filtragem).
    """)
    st.dataframe(df_timeseries.head(10))
    
    st.subheader("Tabelas Est√°ticas")
    st.markdown("""
    **Melhor para:** Exibir pequenos conjuntos de dados de forma est√°tica e compacta.
    """)
    st.table(df_categorical)
    
    # JSON
    st.subheader("Visualiza√ß√£o de Estruturas JSON")
    st.markdown("""
    **Melhor para:** Exibir estruturas de dados hier√°rquicas de forma formatada.
    """)
    st.json({
        "nome": "Dashboard de Visualiza√ß√£o",
        "criado_por": "Equipe de BI",
        "metricas": {
            "cliques": 1245,
            "visualizacoes": 5632,
            "conversao": 0.032
        },
        "integra√ß√µes": ["Matplotlib", "Plotly", "Altair", "Bokeh", "PyDeck", "Graphviz"]
    })

# Conclusion
st.markdown("---")
st.header("Conclus√£o e Recomenda√ß√µes")
st.write("""
## An√°lise Comparativa das Bibliotecas de Visualiza√ß√£o

Este dashboard demonstra os diferentes tipos de gr√°ficos dispon√≠veis atrav√©s do Streamlit.
Cada biblioteca tem seus pontos fortes e casos de uso ideais:

### Gr√°ficos Nativos do Streamlit
‚úÖ **Vantagens:** Implementa√ß√£o r√°pida e f√°cil, sem depend√™ncias adicionais
‚ùå **Limita√ß√µes:** Menos op√ß√µes de personaliza√ß√£o
üîç **Melhor para:** Prototipagem r√°pida e an√°lises simples

### Matplotlib/Seaborn
‚úÖ **Vantagens:** Controle detalhado, grande comunidade, estabilidade
‚ùå **Limita√ß√µes:** Menos interativos, sintaxe mais verbosa
üîç **Melhor para:** Publica√ß√µes cient√≠ficas, visualiza√ß√µes estat√≠sticas complexas

### Altair/Vega-Lite
‚úÖ **Vantagens:** Sintaxe declarativa, interatividade elegante
‚ùå **Limita√ß√µes:** Conjuntos de dados menores, curva de aprendizado para gram√°tica
üîç **Melhor para:** Visualiza√ß√µes interativas com menos c√≥digo

### Plotly
‚úÖ **Vantagens:** Alta interatividade, gr√°ficos 3D, dashboard-ready
‚ùå **Limita√ß√µes:** Arquivos maiores, pode ser mais lento
üîç **Melhor para:** Dashboards interativos, visualiza√ß√µes complexas e 3D

### Bokeh
‚úÖ **Vantagens:** Interatividade para web, design para aplica√ß√µes
‚ùå **Limita√ß√µes:** API mais complexa, cuidado com vers√µes compat√≠veis
üîç **Melhor para:** Aplica√ß√µes web interativas integradas

### PyDeck/GraphViz
‚úÖ **Vantagens:** Especializados em seus dom√≠nios (mapas 3D, diagramas)
‚ùå **Limita√ß√µes:** Casos de uso mais espec√≠ficos
üîç **Melhor para:** Visualiza√ß√µes geoespaciais (PyDeck) e diagramas de fluxo (GraphViz)

## Recomenda√ß√µes para Implementa√ß√£o

1. Para prot√≥tipos r√°pidos: use os gr√°ficos nativos do Streamlit
2. Para an√°lises explorat√≥rias detalhadas: use Plotly ou Altair
3. Para publica√ß√µes cient√≠ficas: use Matplotlib/Seaborn
4. Para mapas e visualiza√ß√µes geoespaciais: use PyDeck
5. Para diagramas e gr√°ficos de rede: use Graphviz

Esta versatilidade de op√ß√µes permite selecionar a ferramenta ideal para cada caso de uso espec√≠fico.
""")

# Sugest√µes finais
st.info("""
üí° **Pr√≥ximos Passos Sugeridos:**
1. Escolher a biblioteca mais adequada para os requisitos espec√≠ficos do seu projeto
2. Implementar visualiza√ß√µes consistentes utilizando a biblioteca escolhida
3. Considerar a combina√ß√£o de diferentes bibliotecas para diferentes tipos de visualiza√ß√£o
""")

# Adicionar se√ß√£o de exporta√ß√£o de relat√≥rio e feedback
st.markdown("---")
st.header("Relat√≥rio e Feedback")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Exportar Relat√≥rio")
    st.write("Gere um relat√≥rio com os principais insights e recomenda√ß√µes:")
    
    report_options = st.multiselect(
        "Selecione o conte√∫do a ser inclu√≠do no relat√≥rio:",
        ["An√°lise comparativa das bibliotecas", "Recomenda√ß√µes para implementa√ß√£o", "Exemplos de c√≥digos", "Estat√≠sticas de uso"],
        default=["An√°lise comparativa das bibliotecas", "Recomenda√ß√µes para implementa√ß√£o"]
    )
    
    if st.button("Gerar Relat√≥rio PDF"):
        # Criar texto do relat√≥rio com base nas op√ß√µes selecionadas
        report_content = "RELAT√ìRIO DE VISUALIZA√á√ïES DE DADOS\n\n"
        report_content += f"Gerado em: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
        
        if "An√°lise comparativa das bibliotecas" in report_options:
            report_content += "AN√ÅLISE COMPARATIVA DAS BIBLIOTECAS\n"
            report_content += "- Gr√°ficos Nativos: Implementa√ß√£o r√°pida e f√°cil, ideal para prototipagem\n"
            report_content += "- Matplotlib/Seaborn: Controle detalhado, grande comunidade, ideal para publica√ß√µes cient√≠ficas\n"
            report_content += "- Altair/Vega-Lite: Sintaxe declarativa, interatividade elegante\n"
            report_content += "- Plotly: Alta interatividade, gr√°ficos 3D, dashboard-ready\n"
            report_content += "- Bokeh: Interatividade para web, design para aplica√ß√µes\n"
            report_content += "- PyDeck/GraphViz: Especializados para visualiza√ß√µes geoespaciais e diagramas\n\n"
        
        if "Recomenda√ß√µes para implementa√ß√£o" in report_options:
            report_content += "RECOMENDA√á√ïES PARA IMPLEMENTA√á√ÉO\n"
            report_content += "1. Para prot√≥tipos r√°pidos: use os gr√°ficos nativos do Streamlit\n"
            report_content += "2. Para an√°lises explorat√≥rias detalhadas: use Plotly ou Altair\n"
            report_content += "3. Para publica√ß√µes cient√≠ficas: use Matplotlib/Seaborn\n"
            report_content += "4. Para mapas e visualiza√ß√µes geoespaciais: use PyDeck\n"
            report_content += "5. Para diagramas e gr√°ficos de rede: use Graphviz\n\n"
        
        if "Estat√≠sticas de uso" in report_options:
            try:
                if os.path.exists("visit_counter.csv"):
                    visit_df = pd.read_csv("visit_counter.csv")
                    report_content += "ESTAT√çSTICAS DE USO\n"
                    report_content += f"Total de visualiza√ß√µes: {visit_df['visits'].iloc[0]}\n"
                    report_content += f"Primeira visita: {visit_df['first_visit'].iloc[0]}\n"
                    report_content += f"√öltima visita: {visit_df['last_visit'].iloc[0]}\n\n"
            except:
                report_content += "ESTAT√çSTICAS DE USO\n"
                report_content += "Estat√≠sticas n√£o dispon√≠veis no modo de demonstra√ß√£o\n\n"
        
        st.success("Relat√≥rio gerado com sucesso! Voc√™ pode baix√°-lo usando o bot√£o abaixo.")
        st.download_button(
            label="Baixar Relat√≥rio",
            data=report_content,
            file_name=f"relatorio_visualizacoes_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )

with col2:
    st.subheader("Feedback e Sugest√µes")
    st.write("Ajude-nos a melhorar este dashboard:")
    
    feedback_name = st.text_input("Nome (opcional)")
    feedback_email = st.text_input("Email (opcional)")
    feedback_rating = st.slider("Como voc√™ avalia este dashboard?", 1, 5, 5)
    feedback_comments = st.text_area("Coment√°rios ou sugest√µes")
    
    if st.button("Enviar Feedback"):
        feedback_file = "feedback.csv"
        feedback_time = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        
        feedback_data = {
            'data': [feedback_time],
            'nome': [feedback_name if feedback_name else "An√¥nimo"],
            'email': [feedback_email if feedback_email else "N√£o informado"],
            'avaliacao': [feedback_rating],
            'comentarios': [feedback_comments if feedback_comments else "Sem coment√°rios"]
        }
        
        feedback_df = pd.DataFrame(feedback_data)
        
        try:
            # Verificar se o arquivo j√° existe para anexar ou criar novo
            if os.path.exists(feedback_file):
                try:
                    feedback_df.to_csv(feedback_file, mode='a', header=False, index=False)
                except PermissionError:
                    pass  # Ignora erro de permiss√£o no modo de deploy
            else:
                try:
                    feedback_df.to_csv(feedback_file, index=False)
                except PermissionError:
                    pass  # Ignora erro de permiss√£o no modo de deploy
            
            st.success(f"Obrigado pelo seu feedback! Avalia√ß√£o: {feedback_rating}/5")
        except:
            # Sempre mostra sucesso para o usu√°rio final, mesmo se n√£o conseguir salvar o arquivo
            st.success(f"Obrigado pelo seu feedback! Avalia√ß√£o: {feedback_rating}/5 (Modo de demonstra√ß√£o)")

# Rodap√© com informa√ß√µes da vers√£o
st.markdown("---")
st.caption(f"Dashboard de Tipos de Gr√°ficos | Vers√£o 1.0 | √öltima atualiza√ß√£o: {datetime.date.today().strftime('%d/%m/%Y')}") 
